#!/usr/bin/python

"""
 Copyright (c) 2019-2020, Ontario Institute for Cancer Research (OICR).
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as published
 by the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.
 You should have received a copy of the GNU Affero General Public License
 along with this program. If not, see <https://www.gnu.org/licenses/>.
 
 Author: Hardeep Nahal-Bose <hardeep.nahal@oicr.on.ca>

# Script used to generate required data for GoogleDoc worksheet. This requires the intermediate song report generated by Robert (contains mapping information between legacy ICGC analysis ID and ARGO analysis IDs) and the summary file after processing.

## Example inputs:
## summary_file: https://raw.githubusercontent.com/icgc-argo/argo-meta/master/icgc_song_payloads/PACA-CA/WGS/PACA-CA_WGS_batch1_summary.tsv
## intermediate song mapping file: https://raw.githubusercontent.com/icgc-argo/argo-meta/master/icgc_song_payloads/PACA-CA/WGS/intermediate-song-rdpc-collab-report.PACA-CA.WGS.batch1.json
## output_file: worksheet.tsv
##
## Copy contents of worksheet.tsv into main GoogleDoc worksheet

"""

import os
import re
import json
import csv
import sys, getopt
import argparse



parser = argparse.ArgumentParser()
parser.add_argument("-s", "-summary_file", dest="summary_file", required=True)
parser.add_argument("-i", "-intermediate_song_file", dest="intermediate_song_file", required=True)
parser.add_argument("-o", "-out_file", dest="out_file", required=True)
parser.add_argument("-p", "-project", dest="project", required=True)
args = parser.parse_args()

intermediateReport = args.intermediate_song_file
summaryFile = args.summary_file
project_id = args.project

#summaryFile = open(args.summary_file, "r")
outFile = open(args.out_file, "w")
outFile.write("submitter_donor_id\tsubmitter_sample_id\ttumour_normal_designation\tsequencing_strategy\tdonor_id\tsample_id\tstudy_id\tanalysis_id\n")
completed = {}


def get_analysisId_mapping():
   mapping = {}
   mapping_file = open("%s_analysis_id_mapping.tsv"%(project_id), "w")
   report = json.load(open(intermediateReport, "r"))
   for payload in report["success"]:
      legacyAnalysisIds = payload["legacyAnalysisIds"]
      for legacy_id in legacyAnalysisIds:
         mapping[legacy_id] = payload["targetAnalysisId"]

   for legacy_id in mapping:
      mapping_file.write("%s\t%s\n"%(legacy_id, mapping[legacy_id]))
   mapping_file.close()
   return mapping

#def getIds():
#   idMapper = {}
#   reader = csv.DictReader(open("ESAD-UK_renamed_donor_specimen_IDs.tsv"), delimiter="\t")
#   for row in reader:
#      idMapper[row["OLD donorSubmitterId"]] = row["NEW donorSubmitterId"]
#      idMapper[row["OLD specimenSubmitterId"]] = row["NEW specimenSubmitterId"]
#      idMapper[row["OLD donorId"]] = row["NEW donorId"]
#   return idMapper

#id_mapping = getIds() # Was used to get new IDs for ESAD-UK messed up IDs. Don't need this for other projects
mapping = get_analysisId_mapping()
reader = csv.DictReader(open(summaryFile), delimiter="\t")
for row in reader:
   icgc_analysis_id = row["bundle_id"]
   if icgc_analysis_id in mapping and icgc_analysis_id not in completed:
      print("Processing icgc_analysis_id=%s"%icgc_analysis_id)
      argo_analysis_id = mapping[icgc_analysis_id]
      specimen_type = row["specimen_type"]
      if re.search("tumour", specimen_type, re.IGNORECASE):
         tumour_normal_designation = "tumour"
      if re.search("normal", specimen_type, re.IGNORECASE):
         tumour_normal_designation = "normal"
      
      outFile.write("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n"%(row["submitter_donor_id"], row["submitter_sample_id"], tumour_normal_designation, row["sequencing_strategy"], row["dcc_donor_id"], row["dcc_sample_id"], project_id, argo_analysis_id))
   completed[icgc_analysis_id] = argo_analysis_id 
outFile.close()
